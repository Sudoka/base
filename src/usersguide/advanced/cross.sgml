<section id="cross" xreflabel="Cross Kickstarting">

	<title> Cross Kickstarting </title>

<para>
Rocks supports heterogeneous clusters that contain nodes of different hardware
architectures with a process called cross-kickstarting.  To support an
architecture different than its own, a frontend needs to expand its local
distribution with additional packages.  This section describes how to install
distributions for other architectures on your frontend.
</para>

<para>
Start with a frontend node, as described by <xref linkend="install-frontend">,
or <xref linkend="upgrade-frontend">. Follow the instructions below for every
desired architecture. 
</para>


<section id="cross-i386" xreflabel="Cross Kickstarting x86_64 Compute Nodes with a i386 Frontend">

<title> Cross Kickstarting x86_64 Compute Nodes with a i386 Frontend </title>

<para>
For this example, we assume the frontend is an i386 (32-bit) and the
compute nodes are x86_64 CPUs (64-bit).
</para>

<orderedlist>
<listitem>
<para>
Download the x86_64 Rocks rolls.
At a minimum, you'll need to download the x86_64 versions of the Base, Kernel,
Web Server and OS disk 1 and OS disk 2 rolls.
</para>

<para>
For each roll, add it to the frontend's roll repository:
</para>

<screen>
# rocks add roll &lt;roll-name&gt;.iso
# rocks enable roll &lt;roll-name&gt;
</screen>

</listitem>

<listitem>
<para>
Rebuild your distribution:
</para>

<screen>
# cd /export/rocks/install
# rocks create distro
# rocks create distro arch=x86_64
</screen>
</listitem>

<listitem>
<para>
To prepare the frontend to cross-kickstart compute nodes via PXE, you
first need to add the <computeroutput>rocks-boot</computeroutput> package from
the x86_64 architecture:
</para>

<screen>
# rpm -i --force --ignorearch /export/rocks/install/rocks-dist/x86_64/RedHat/RPMS/rocks-boot-&document-version;-1.x86_64.rpm
# cp /boot/kickstart/default/vmlinuz-&document-version;-x86_64 /tftpboot/pxelinux
# cp /boot/kickstart/default/initrd.img-&document-version;-x86_64 /tftpboot/pxelinux
</screen>
</listitem>

<listitem>
<para>
Then you need to add a new <computeroutput>bootaction</computeroutput>:
</para>

<screen>
# rocks add bootaction action="install x86_64" kernel="vmlinuz-&document-version;-x86_64" \
  ramdisk="initrd.img-&document-version;-x86_64" \
  args="ks ramdisk_size=150000 lang= devfs=nomount pxe kssendmac selinux=0 noipv6"
</screen>
</listitem>

<listitem>
<para>
The next step requires you to PXE boot the cross-kickstarted node twice: the
first is to discover the node, and a second time to install it.
</para>

<para>
On the frontend, run insert-ethers to discover the compute node:
</para>

<screen>
# insert-ethers
</screen>

<para>
Then, PXE boot the compute node. 
After the compute node is discovered by insert-ethers, kill insert-ethers (by
hitting the F9 key), then turn off the compute node.
</para>

<para>
Now instruct the node to use the "install x86_64" profile when it PXE boots (the
command below assumes the compute node's name is compute-0-0):
</para>

<screen>
# rocks set host installaction compute-0-0 action="install x86_64"
</screen>

<para>
Now PXE boot the compute node again.
The compute node will now install itself with the x86_64 distribution.
</para>
</listitem>

</orderedlist>
</section>


<section id="cross-x86_64" xreflabel="Cross Kickstarting i386 Compute Nodes with a x86_64 Frontend">

<title> Cross Kickstarting i386 Compute Nodes with a x86_64 Frontend </title>

<para>
For this example, we assume the frontend is a x86_64 (64-bit) and the
compute nodes are i386 CPUs (32-bit).
</para>

<orderedlist>
<listitem>
<para>
Download the i386 Rocks rolls.
At a minimum, you'll need to download the i386 versions of the Base, Kernel,
Web Server and OS disk 1 and OS disk 2 rolls.
</para>

<para>
For each roll, add it to the frontend's roll repository:
</para>

<screen>
# rocks add roll &lt;roll-name&gt;.iso
# rocks enable roll &lt;roll-name&gt;
</screen>

</listitem>

<listitem>
<para>
Rebuild your distribution:
</para>

<screen>
# cd /export/rocks/install
# rocks create distro
# rocks create distro arch=i386
</screen>
</listitem>

<listitem>
<para>
To prepare the frontend to cross-kickstart compute nodes via PXE, you
first need to add the <computeroutput>rocks-boot</computeroutput> package from
the i386 architecture:
</para>

<screen>
# rpm -i --force /export/rocks/install/rocks-dist/i386/RedHat/RPMS/rocks-boot-&document-version;-1.i386.rpm
# cp /boot/kickstart/default/vmlinuz-&document-version;-i386 /tftpboot/pxelinux
# cp /boot/kickstart/default/initrd.img-&document-version;-i386 /tftpboot/pxelinux
</screen>
</listitem>

<listitem>
<para>
Then you need to add a new <computeroutput>bootaction</computeroutput>:
</para>

<screen>
# rocks add bootaction action="install i386" kernel="vmlinuz-&document-version;-i386" \
  ramdisk="initrd.img-&document-version;-i386" \
  args="ks ramdisk_size=150000 lang= devfs=nomount pxe kssendmac selinux=0 noipv6"
</screen>
</listitem>

<listitem>
<para>
The next step requires you to PXE boot the cross-kickstarted node twice: the
first is to discover the node, and a second time to install it.
</para>

<para>
On the frontend, run insert-ethers to discover the compute node:
</para>

<screen>
# insert-ethers
</screen>

<para>
Then, PXE boot the compute node. 
After the compute node is discovered by insert-ethers, kill insert-ethers (by
hitting the F9 key), then turn off the compute node.
</para>

<para>
Now instruct the node to use the "install i386" profile when it PXE boots (the
command below assumes the compute node's name is compute-0-0):
</para>

<screen>
# rocks set host installaction compute-0-0 action="install i386"
</screen>

<para>
Now PXE boot the compute node again.
The compute node will now install itself with the i386 distribution.
</para>
</listitem>

</orderedlist>
</section>

</section>

