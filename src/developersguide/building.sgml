<chapter id="building" xreflabel="building">
	<title> Building Your Roll </title>


<para>
In this section, we'll show you how to build your roll and we'll examine
some of the files that are created when you build your roll.
</para>

<para>
Building your roll is rather simple.
To build the example Valgrind Roll that we developed in the previous
section, execute:
</para>

<screen>
# cd /export/src/roll/valgrind
# make roll
</screen>

<para>
This will take several minutes to build.
When it completes, the most important file is
<constant>valgrind-1.0-0.x86_64.disk1.iso</constant> --
this is the Valgrind Roll in an ISO image.
You can burn this ISO to a CD/DVD or you can transport it to a frontend and
install it like you would any other roll.
</para>

<para>
When you execute "make roll", it will descend into the
<constant>src</constant> directory and try to build every package.
In the case of the Valgrind Roll, there are two subdirectories under
<constant>src</constant>: <constant>usersguide</constant> and
<constant>valgrind</constant>.
The "make roll" process will go into each of those directories and execute
"make rpm", 
and as decribed in the section <xref linkend="internals-packages-src">, the
resulting RPMs will be placed in
<constant>/export/src/roll/valgrind/RPMS/x86_64</constant>.
</para>

<para>
Also, all the node XML files and the graph XML file will be bundled into
a package called
<constant>roll-valgrind-kickstart-1.0-0.noarch.rpm</constant>.
To see this, execute:
</para>

<screen>
# cd /export/src/roll/valgrind
# rpm -qlp RPMS/noarch/roll-valgrind-kickstart-1.0-0.noarch.rpm 
/export/profile
/export/profile/graphs
/export/profile/graphs/default
/export/profile/graphs/default/valgrind.xml
/export/profile/nodes
/export/profile/nodes/valgrind-base.xml
/export/profile/nodes/valgrind-client.xml
/export/profile/nodes/valgrind-server.xml
/export/profile/roll-valgrind.xml
</screen>

<para>
Above we see the graph XML file (
<constant>/export/profile/graphs/default/valgrind.xml</constant>)
and the node XML files:
(<constant>/export/profile/nodes/valgrind-base.xml</constant>,
<constant>/export/profile/nodes/valgrind-client.xml</constant>,
<constant>/export/profile/nodes/valgrind-server.xml</constant>).
The file <constant>/export/profile/roll-valgrind.xml</constant> contains
info that describes how the roll was built.
</para>

<para>
After the Roll is built, you can add a file to the Valgrind Roll that will
help you determine if all the expected packages were built.
We do this with the "manifest-check.py" program.
</para>

<para>
The "manifest-check.py" program looks at file called "manifest" in the
base directory of the Roll and then looks at the RPMs under the directory
"disk1".
The "manifest-check.py" program expects that only the RPMs listed in
"manifest" will be present.
If there is an entry in "manifest" and if the RPM doesn't exist
under "disk1", you will see an error message like:
</para>

<screen>
ERROR - the following packages were not built:
        roll-condor-usersguide
</screen>

<para>
And if there is package that was built, but there is no entry in
"manifest" for it, you'll see an error message like:
</para>

<screen>
ERROR - the following packages were built but not in manifest:
        foundation-perl-Statistics-Descriptive
        foundation-perl-Spreadsheet-ParseExcel
</screen>

<para>
For the Valgrind Roll, create a file named "manifest":
</para>

<screen>
# cd /export/src/roll/valgrind
# vi manifest
</screen>

<para>
Then put the following package names in it:
</para>

<screen>
roll-valgrind-kickstart
roll-valgrind-usersguide
valgrind
</screen>

<para>
Now run "manifest-check.py" to verify that all the expected packages have
been built:
</para>

<screen>
# /opt/rocks/share/devel/src/roll/bin/manifest-check.py
</screen>

<note>
<para>
Everytime you add a new package to your Roll, make sure to add the package's
base name to the "manifest" file.
</para>
</note>

</chapter>
