#!/bin/env python
#
# $Id: genrcldocs,v 1.6 2012/05/06 05:48:40 phil Exp $
#

import os
import sys
import string
import errno


class RSTgenerator:

    def __init__(self, argv):
        self.usageName = os.path.basename(argv[0])
        if len(sys.argv) < 2:
            self.help() 
        if sys.argv[1] in ['-h', '--help']:
            self.help() 
        self.roll = sys.argv[1]
        self.isHeader = 1
        self.list = []
        self.driver = "roll-commands.rst"

    def help (self):
        """print usage"""
        print '\nNAME: \n' , \
        '\t%s - create rst files for rocks commands associated with the roll \n' % self.usageName, \
        '\nSYNOPSIS:\n' , \
        '\t%s ROLL\n' % self.usageName, \
        '\t%s [-h|help]\n' % self.usageName, \
        '\nDESCRIPTION:\n' , \
        '    ROLL       - create rst documentation files for roll ROLL \n', \
        '                 If no commands are available no files will be generated. \n', \
        '    -h|--help  - prints usage\n', \
        sys.exit(0)


    def listRollCommands (self):
        """find roll commands"""
        cmd = '/opt/rocks/bin/rocks list roll command %s' % self.roll
        #cmd = '/opt/rocks/bin/rocks list roll command %s | grep list | grep -v installfile | grep -v profile' % self.roll
        for line in os.popen(cmd).readlines():
            if self.isHeader:
                self.isHeader = 0
                continue
            self.list.append(line[:-1].strip())
    
    def makeRSTdir(self):
        """create directory to hold commands rst files """
        if len(self.list) == 0:
            print "No rocks commands for %s roll" % self.roll
            sys.exit(0)

        dir='./commands'
        try:
            os.makedirs(dir)
        except OSError as e:
                if e.errno != errno.EEXIST:
                    raise

    def makeRSTfiles(self):
        """create all the commands/roll-<command>.rst files"""
        for line in self.list:
            cmd  = 'rocks %s help format=sphinx' % line
            fout = 'commands/roll-%s.rst' % string.join(line.split(' '), '-')
            os.system('%s > %s' % (cmd, fout))

    def makeDriverFile(self):
        """create the roll-commands.txt file"""
        file = open(self.driver, 'w')

        lines =  '.. highlight:: rest\n\n'
        lines += '.. include:: rocks-rst\n\n'
        lines += '.. _roll-commands:\n\n'
        lines += '*****************\n'
        lines += 'Command Reference\n'
        lines += '*****************\n'
        lines += '.. toctree::\n'
        lines += '   :maxdepth: 2\n'

        prevVerb = ''
        for line in self.list:
            currVerb = line.split(' ')[0]
            if currVerb != prevVerb:
                lines += '\n.. _%s-ref:\n\n' % currVerb
                lines += '%s\n' % currVerb
                section =  "=" * len(currVerb)
                lines += '%s\n\n' % section
            lines += '.. include:: commands/roll-%s.rst\n' % string.join(line.split(' '), '-')
            prevVerb = currVerb

        file.write(lines)
        file.close()

    def run(self):
        self.listRollCommands()
        self.makeRSTdir()
        self.makeRSTfiles()
        self.makeDriverFile()

if __name__ == "__main__":
    app = RSTgenerator(sys.argv)
    app.run()
